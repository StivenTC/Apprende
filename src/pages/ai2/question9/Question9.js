/* eslint-disable react-hooks/exhaustive-deps */
import { Header } from "../../../components/layout/Header/Header";
import { useState } from "react";
import { FeedbackCorrect } from "../../../components/layout/feedback/Feedback";
import { FeedbackClue } from "../../../components/layout/feedback/FeedbackClue";
import { BsDropletFill } from "react-icons/bs";
import TopCloud from "../../../assets/top-clouds.svg";
import BottomWater from "../../../assets/bottom-water.svg";
import saveActivity from "../../../helpers/saveActivity";
import { IoFish } from "react-icons/io5";

export function Question9({ goView, setResult }) {

  const [selectedDrop, setSelectedDrop] = useState('');
  const [showFeedback, setFeedback] = useState("");
  const [attempts, setAttempts] = useState(1);
  const [corrects, setCorrects] = useState([]);
  const [dataAnswers, setDataAnswers] = useState([]);

  const quarters = ["3/7", "8/7", "5/7", "14/7", "7/7"];
  const clueTexts = [
    "Las fracciones equivalentes representan la misma cantidad aunque el numerador y el denominador sean diferentes.",
    "Recuerda que para comparar fracciones que tienen el mismo denominador (en este caso 7), debes comparar los numeradores. Busca y selecciona los peces cuyo numerador es menor al numerador de 6/7."
  ];
  const Drop = () => {
    return <svg className="water-drop" width="93" height="61" viewBox="0 0 93 61" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M72.8457 44.75C76.6265 44.75 79.6914 41.6851 79.6914 37.9043C79.6914 34.1235 76.6265 31.0586 72.8457 31.0586C69.0649 31.0586 66 34.1235 66 37.9043C66 41.6851 69.0649 44.75 72.8457 44.75Z" stroke="#FFBC0F" stroke-miterlimit="10" />
      <path d="M69.8996 35.5195L69.8996 35.5195V35.5265C69.8996 36.8659 70.4316 38.1503 71.3787 39.0974C72.3258 40.0445 73.6103 40.5766 74.9497 40.5766L74.9533 40.5765C75.3465 40.5737 75.7361 40.5245 76.1144 40.4311C75.8913 40.6913 75.6349 40.9235 75.3502 41.1212C74.6747 41.5904 73.8723 41.8428 73.0499 41.8448C71.9795 41.8447 70.953 41.4194 70.1962 40.6626C69.4393 39.9057 69.014 38.8792 69.0139 37.8087C69.0148 37.1167 69.1942 36.4365 69.5348 35.8341C69.6443 35.6404 69.7693 35.4568 69.9082 35.285C69.9036 35.363 69.9007 35.4412 69.8996 35.5195Z" fill="#FFBC0F" stroke="#FFBC0F" />
      <path d="M92.0493 17.216C92.0493 19.6414 90.0831 21.6077 87.6576 21.6077C85.2321 21.6077 83.2659 19.6414 83.2659 17.216C83.2659 14.7905 85.2321 12.8242 87.6576 12.8242C90.0831 12.8242 92.0493 14.7905 92.0493 17.216Z" fill="#FFBC0F" stroke="#FFBC0F" />
      <path d="M84.2882 14.7687L84.2882 14.7687V14.7725C84.2882 16.2025 84.8562 17.5738 85.8674 18.5849C86.8785 19.596 88.2499 20.1641 89.6799 20.1641H89.6804C90.1494 20.1637 90.6141 20.1015 91.0627 19.9807C90.801 20.3069 90.4925 20.5959 90.1452 20.8374C89.411 21.3481 88.5383 21.6224 87.644 21.6237C87.0663 21.6237 86.4942 21.5096 85.9605 21.2881C85.4268 21.0667 84.9421 20.7421 84.5342 20.3331C84.1262 19.924 83.803 19.4383 83.583 18.904C83.3631 18.3698 83.2506 17.7976 83.2522 17.22C83.2554 16.4668 83.4523 15.7272 83.8239 15.072C83.9625 14.8277 84.1237 14.5982 84.3047 14.3862C84.2947 14.5133 84.2892 14.6409 84.2882 14.7687Z" fill="#FFBC0F" stroke="#FFBC0F" />
      <path d="M74.9283 2.58251C74.9283 3.73265 73.996 4.66502 72.8458 4.66502C71.6957 4.66502 70.7633 3.73265 70.7633 2.58251C70.7633 1.43237 71.6957 0.5 72.8458 0.5C73.996 0.5 74.9283 1.43237 74.9283 2.58251Z" fill="#FFBC0F" stroke="#FFBC0F" />
      <path d="M72.7419 4.14459C73.1161 4.30017 73.5173 4.38035 73.9224 4.38073C73.6048 4.5663 73.2429 4.66499 72.8732 4.66524C72.5998 4.66524 72.329 4.61133 72.0763 4.50664C71.8235 4.40196 71.5939 4.24859 71.4006 4.05526C71.2072 3.86188 71.0538 3.63231 70.9492 3.37964C70.8445 3.12699 70.7907 2.8562 70.7907 2.58271L70.7907 2.58106C70.7899 2.34903 70.8279 2.11936 70.9023 1.90135C70.9408 2.09433 70.9978 2.28364 71.0727 2.46664C71.2267 2.84253 71.4534 3.18429 71.7399 3.47225C72.0264 3.76025 72.3669 3.98868 72.7419 4.14459ZM73.9242 4.38073C73.9246 4.38073 73.9249 4.38073 73.9253 4.38073V4.37902L73.9242 4.38073Z" fill="#FFBC0F" stroke="#FFBC0F" />
      <path d="M7.8457 59.75C11.6265 59.75 14.6914 56.6851 14.6914 52.9043C14.6914 49.1235 11.6265 46.0586 7.8457 46.0586C4.06492 46.0586 1 49.1235 1 52.9043C1 56.6851 4.06492 59.75 7.8457 59.75Z" stroke="#FFBC0F" stroke-miterlimit="10" />
      <path d="M4.89961 50.5195L4.89956 50.5195V50.5265C4.89956 51.8659 5.4316 53.1503 6.37868 54.0974C7.32577 55.0445 8.6103 55.5766 9.94968 55.5766L9.95328 55.5765C10.3465 55.5737 10.7361 55.5245 11.1144 55.4311C10.8913 55.6913 10.6349 55.9235 10.3502 56.1212C9.67469 56.5904 8.87232 56.8428 8.04986 56.8448C6.97952 56.8447 5.95304 56.4194 5.19618 55.6626C4.43926 54.9057 4.014 53.8792 4.01392 52.8087C4.01482 52.1167 4.19421 51.4365 4.5348 50.8341C4.64431 50.6404 4.76931 50.4568 4.90821 50.285C4.90357 50.363 4.9007 50.4412 4.89961 50.5195Z" fill="#FFBC0F" stroke="#FFBC0F" />
      <path d="M27.0493 32.216C27.0493 34.6414 25.0831 36.6077 22.6576 36.6077C20.2321 36.6077 18.2659 34.6414 18.2659 32.216C18.2659 29.7905 20.2321 27.8242 22.6576 27.8242C25.0831 27.8242 27.0493 29.7905 27.0493 32.216Z" fill="#FFBC0F" stroke="#FFBC0F" />
      <path d="M19.2882 29.7687L19.2882 29.7687V29.7725C19.2882 31.2025 19.8562 32.5738 20.8674 33.5849C21.8785 34.596 23.2499 35.1641 24.6799 35.1641H24.6804C25.1494 35.1637 25.6141 35.1015 26.0627 34.9807C25.801 35.3069 25.4925 35.5959 25.1452 35.8374C24.411 36.3481 23.5383 36.6224 22.644 36.6237C22.0663 36.6237 21.4942 36.5096 20.9605 36.2881C20.4268 36.0667 19.9421 35.7421 19.5342 35.3331C19.1262 34.924 18.803 34.4383 18.583 33.904C18.3631 33.3698 18.2506 32.7976 18.2522 32.22C18.2554 31.4668 18.4523 30.7272 18.8239 30.072C18.9625 29.8277 19.1237 29.5982 19.3047 29.3862C19.2947 29.5133 19.2892 29.6409 19.2882 29.7687Z" fill="#FFBC0F" stroke="#FFBC0F" />
      <path d="M9.92832 17.5825C9.92832 18.7326 8.99595 19.665 7.84582 19.665C6.69568 19.665 5.76331 18.7326 5.76331 17.5825C5.76331 16.4324 6.69568 15.5 7.84582 15.5C8.99595 15.5 9.92832 16.4324 9.92832 17.5825Z" fill="#FFBC0F" stroke="#FFBC0F" />
      <path d="M7.74192 19.1446C8.11613 19.3002 8.51727 19.3803 8.9224 19.3807C8.60482 19.5663 8.24286 19.665 7.87319 19.6652C7.59979 19.6652 7.32899 19.6113 7.07626 19.5066C6.82354 19.402 6.59394 19.2486 6.4006 19.0553C6.20723 18.8619 6.05383 18.6323 5.94917 18.3796C5.84452 18.127 5.79066 17.8562 5.79067 17.5827L5.79066 17.5811C5.7899 17.349 5.82791 17.1194 5.90233 16.9014C5.94081 17.0943 5.99779 17.2836 6.07274 17.4666C6.22669 17.8425 6.45345 18.1843 6.73989 18.4722C7.02637 18.7603 7.36691 18.9887 7.74192 19.1446ZM8.92417 19.3807C8.92455 19.3807 8.92493 19.3807 8.92532 19.3807V19.379L8.92417 19.3807Z" fill="#FFBC0F" stroke="#FFBC0F" />
    </svg>
  };
  const Splash = () => {
    return <svg className="drop-splash scale-in-center" width="21" height="34" viewBox="0 0 21 34" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M6.01 32.7505C8.77695 32.7505 11.02 30.5074 11.02 27.7405C11.02 24.9735 8.77695 22.7305 6.01 22.7305C3.24305 22.7305 1 24.9735 1 27.7405C1 30.5074 3.24305 32.7505 6.01 32.7505Z" stroke="#F1F2F2" stroke-miterlimit="10" />
      <path d="M4.43997 24.8398C4.29994 25.2108 4.2255 25.6034 4.21997 25.9999C4.21997 26.883 4.57079 27.73 5.19528 28.3545C5.81978 28.979 6.66679 29.3298 7.54996 29.3298C8.1585 29.3255 8.7539 29.1524 9.26996 28.8298C9.0323 29.4631 8.60742 30.009 8.05185 30.3949C7.49628 30.7808 6.83639 30.9883 6.15997 30.9899C5.27945 30.9899 4.435 30.6401 3.81238 30.0175C3.18976 29.3948 2.83997 28.5504 2.83997 27.6699C2.84067 27.1004 2.98827 26.5407 3.26855 26.0449C3.54884 25.5492 3.95235 25.1341 4.43997 24.8398V24.8398Z" fill="#F1F2F2" />
      <path d="M16.85 16.1795C18.8272 16.1795 20.43 14.5767 20.43 12.5995C20.43 10.6224 18.8272 9.01953 16.85 9.01953C14.8728 9.01953 13.27 10.6224 13.27 12.5995C13.27 14.5767 14.8728 16.1795 16.85 16.1795Z" fill="#F1F2F2" />
      <path d="M14.99 9.55078C14.8346 9.95285 14.7533 10.3797 14.75 10.8108C14.75 11.7603 15.1272 12.6708 15.7986 13.3422C16.47 14.0135 17.3806 14.3907 18.33 14.3907C18.9872 14.3902 19.6313 14.2066 20.19 13.8607C19.9354 14.5441 19.4782 15.1334 18.8795 15.5498C18.2808 15.9662 17.5693 16.1898 16.84 16.1908C16.3691 16.1908 15.9027 16.0978 15.4677 15.9172C15.0327 15.7367 14.6376 15.4722 14.305 15.1387C13.9725 14.8052 13.709 14.4093 13.5297 13.9738C13.3504 13.5383 13.2587 13.0717 13.26 12.6007C13.2626 11.9866 13.4231 11.3836 13.7261 10.8495C14.029 10.3153 14.4643 9.86811 14.99 9.55078V9.55078Z" fill="#D7DDDD" />
      <path d="M6.01 3.78C7.05381 3.78 7.9 2.93382 7.9 1.89C7.9 0.846182 7.05381 0 6.01 0C4.96618 0 4.12 0.846182 4.12 1.89C4.12 2.93382 4.96618 3.78 6.01 3.78Z" fill="#F1F2F2" />
      <path d="M5.03004 0.28125C4.94994 0.492038 4.90926 0.71579 4.91004 0.941284C4.90873 1.19032 4.95661 1.43714 5.05101 1.6676C5.1454 1.89806 5.28443 2.10762 5.46006 2.28418C5.6357 2.46074 5.84448 2.60081 6.07444 2.69641C6.3044 2.79202 6.55099 2.84119 6.80003 2.84119C7.15433 2.84281 7.50157 2.7422 7.80003 2.55127C7.66551 2.91224 7.42389 3.22341 7.10755 3.44324C6.79121 3.66307 6.41526 3.78104 6.03004 3.78125C5.78184 3.78125 5.53608 3.73231 5.30677 3.63733C5.07747 3.54235 4.86909 3.40316 4.69358 3.22766C4.51808 3.05216 4.37887 2.84381 4.28388 2.6145C4.1889 2.3852 4.14002 2.13943 4.14002 1.89124C4.13897 1.56929 4.22017 1.25234 4.37593 0.970581C4.53168 0.688818 4.75685 0.451591 5.03004 0.28125V0.28125Z" fill="#D7DDDD" />
    </svg>
  };
  const selectDrop = (id) => {
    let correctAnswers = [0, 2];
    let okAnswers = corrects;
    let ans = dataAnswers;
    ans.push(quarters[id])
    setDataAnswers(ans)

    let data = {
      'ENTRE2-Reto 9- Peces': dataAnswers,
      'ENTRE2-Reto 9 Veces': attempts - 1,
    }
    setSelectedDrop(id);
    if (correctAnswers.includes(id)) {
      okAnswers.push(id);
      setCorrects(okAnswers);
      if (okAnswers.length >= 2) {
        saveActivity(data)
        setFeedback('correct');
        //saveUser({ ...userData, rainDrop: true });
        setResult(true);
      }
    } else if (attempts < 3) {
      setTimeout(function () {
        setSelectedDrop('');
        setFeedback('clue');
        setAttempts(attempts + 1);
      }, 500);
    } else {
      //saveUser({ ...userData, rainDrop: false });
      setResult(false);
      data['ENTRE2-Reto 9 Veces'] = attempts
      saveActivity(data)
      setTimeout(function () {
        goView(2);
      }, 500);
    }
  };

  const getClasses = (index) => {
    let style = "";
    if (selectedDrop === index) {
      style += " show-splash";
    }
    if (corrects.includes(index)) {
      style += " answered";
    }
    return style;
  };

  return (
    <div className="fishes">
      <div className="fishes-body">
        <div className="fishes-header">
          <p>Selecciona los <strong>tres globos</strong> que tienen fracciones equivalentes a <strong><sup>6</sup>/<sub>10</sub></strong></p>
          <div className="fishes-header-quest">
            <div className="fishes-header-quest-drops">
              {[...Array(2)].map((item, i) => <div key={i}
                className={`${i < corrects.length ? "fill-mini-drop" : ""}`}>
                <IoFish />
              </div>
              )}
            </div>
            <div className="scales-fractions"><span>6</span>
              <span>7</span>
            </div>
          </div>
        </div>
        <div className="fishes-body">
          <div className="slide-to-waves">
            {[...Array(4)].map(() => <div className="fishes-activity">
              {quarters.map((quart, i) => <div
                key={quart}
                onClick={() => selectDrop(i)}
                className={`fishes-activity-drop ${getClasses(i)}`}>
                <Drop />
                <Splash />
                <div className="scales-fractions">
                  <span>{quart.split(/\//)[0]}</span>
                  <span>{quart.split(/\//)[1]}</span>
                </div>
              </div>
              )}
            </div>)}
          </div>
        </div>
      </div>
      {showFeedback === 'correct' && <FeedbackCorrect goView={goView} view={3} />}
      {showFeedback === 'clue' && <FeedbackClue goView={setFeedback} attempt={attempts} message={clueTexts} />}
    </div>
  );
}