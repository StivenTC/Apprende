/* eslint-disable react-hooks/exhaustive-deps */
import { BiRightArrowAlt } from "react-icons/bi";
import { useState } from "react";
import { FeedbackCorrect } from "../../../components/layout/feedback/Feedback";
import { FeedbackClue } from "../../../components/layout/feedback/FeedbackClue";
import { AISortDnD } from "./AISortDnD";
import saveActivity from "../../../helpers/saveActivity";

export function Question5({ goView, setResult, nextQuestion }) {
  const QuarterA = () => {
    return <svg width="43" height="63" viewBox="0 0 43 63" fill="none" xmlns="http://www.w3.org/2000/svg">
      <line x1="8.82129" y1="31.0859" x2="32.8213" y2="31.0859" stroke="#EDEDFB" stroke-width="2" stroke-linecap="round"/>
      <path d="M18.7383 0.151999C21.6609 0.151999 23.9223 1.12267 25.5223 3.064C27.1223 5.00533 27.9223 7.77867 27.9223 11.384C27.9223 13.7947 27.5489 15.9067 26.8022 17.72C26.0556 19.512 24.9783 20.888 23.5703 21.848C22.1836 22.808 20.5623 23.288 18.7063 23.288C17.4903 23.288 16.2636 23.0853 15.0263 22.68C13.7889 22.2747 12.7329 21.7093 11.8583 20.984C11.5596 20.7493 11.3356 20.504 11.1863 20.248C11.0583 19.9707 10.9943 19.64 10.9943 19.256C10.9943 18.7013 11.1436 18.232 11.4423 17.848C11.7623 17.4427 12.1463 17.24 12.5943 17.24C12.8716 17.24 13.1063 17.2827 13.2983 17.368C13.5116 17.432 13.7889 17.56 14.1302 17.752C14.9836 18.264 15.7409 18.6693 16.4023 18.968C17.0849 19.2453 17.7783 19.384 18.4823 19.384C19.8049 19.384 20.8503 18.776 21.6183 17.56C22.4076 16.344 22.8556 14.6373 22.9623 12.44C22.4716 13.2507 21.7783 13.9013 20.8823 14.392C19.9863 14.8613 18.9836 15.096 17.8743 15.096C16.5516 15.096 15.3676 14.7867 14.3223 14.168C13.2983 13.5493 12.4876 12.6853 11.8903 11.576C11.3143 10.4667 11.0263 9.208 11.0263 7.8C11.0263 6.328 11.3569 5.016 12.0182 3.864C12.6796 2.69066 13.5969 1.784 14.7703 1.144C15.9436 0.482665 17.2663 0.151999 18.7383 0.151999ZM19.0263 11.224C20.0289 11.224 20.8396 10.8933 21.4583 10.232C22.0769 9.57067 22.3863 8.70667 22.3863 7.64C22.3863 6.57333 22.0769 5.70933 21.4583 5.048C20.8396 4.36533 20.0289 4.024 19.0263 4.024C18.0236 4.024 17.2129 4.35467 16.5943 5.016C15.9969 5.67733 15.6983 6.552 15.6983 7.64C15.6983 8.70667 15.9969 9.57067 16.5943 10.232C17.2129 10.8933 18.0236 11.224 19.0263 11.224Z" fill="white"/>
      <path d="M27.6346 57.7852C29.2133 57.7852 30.0026 58.4465 30.0026 59.7692C30.0026 61.1132 29.2133 61.7852 27.6346 61.7852H15.7306C15.0693 61.7852 14.536 61.5932 14.1306 61.2092C13.7466 60.8038 13.5546 60.3025 13.5546 59.7052C13.5546 58.9372 13.864 58.2332 14.4826 57.5932L21.5226 50.1372C23.1013 48.4732 23.8906 46.9372 23.8906 45.5292C23.8906 44.6545 23.6453 43.9932 23.1546 43.5452C22.664 43.0758 21.9493 42.8412 21.0106 42.8412C20.2 42.8412 19.4533 42.9798 18.7706 43.2572C18.088 43.5345 17.2986 43.9398 16.4026 44.4732C16.04 44.6865 15.7626 44.8358 15.5706 44.9212C15.3786 45.0065 15.1546 45.0492 14.8986 45.0492C14.4506 45.0492 14.0666 44.8465 13.7466 44.4412C13.4266 44.0145 13.2666 43.5238 13.2666 42.9692C13.2666 42.5638 13.3306 42.2332 13.4586 41.9772C13.608 41.6998 13.8426 41.4545 14.1626 41.2412C15.1226 40.5372 16.2213 39.9825 17.4586 39.5772C18.7173 39.1505 19.976 38.9372 21.2346 38.9372C22.7493 38.9372 24.072 39.1932 25.2026 39.7052C26.3546 40.2172 27.24 40.9532 27.8586 41.9132C28.4773 42.8518 28.7866 43.9398 28.7866 45.1772C28.7866 46.4785 28.5093 47.6838 27.9546 48.7932C27.4213 49.9025 26.5146 51.1398 25.2346 52.5052L20.2106 57.7852H27.6346Z" fill="white"/>
    </svg> 
  };
  const QuarterB = () => {
    return <svg width="43" height="63" viewBox="0 0 43 63" fill="none" xmlns="http://www.w3.org/2000/svg">
      <line x1="8.82129" y1="31.0859" x2="32.8213" y2="31.0859" stroke="white" stroke-width="2" stroke-linecap="round"/>
      <path d="M18.4889 19C20.0462 19 20.8249 19.6613 20.8249 20.984C20.8249 22.328 20.0462 23 18.4889 23H7.54488C5.96621 23 5.17688 22.328 5.17688 20.984C5.17688 19.6613 5.96621 19 7.54488 19H10.5209V5.912L7.70488 7.608C7.38488 7.8 7.06488 7.896 6.74488 7.896C6.21154 7.896 5.75288 7.672 5.36888 7.224C5.00621 6.776 4.82488 6.27467 4.82488 5.72C4.82488 4.97333 5.15554 4.408 5.81688 4.024L10.8729 0.983999C11.6195 0.535999 12.3662 0.311998 13.1129 0.311998C13.8169 0.311998 14.3929 0.535999 14.8409 0.983999C15.2889 1.41067 15.5129 1.99733 15.5129 2.744V19H18.4889ZM37.2284 19C38.807 19 39.5964 19.6613 39.5964 20.984C39.5964 22.328 38.807 23 37.2284 23H25.3244C24.663 23 24.1297 22.808 23.7244 22.424C23.3404 22.0187 23.1484 21.5173 23.1484 20.92C23.1484 20.152 23.4577 19.448 24.0764 18.808L31.1164 11.352C32.695 9.688 33.4844 8.152 33.4844 6.744C33.4844 5.86933 33.239 5.208 32.7484 4.76C32.2577 4.29067 31.543 4.056 30.6044 4.056C29.7937 4.056 29.047 4.19467 28.3644 4.472C27.6817 4.74933 26.8924 5.15467 25.9964 5.688C25.6337 5.90133 25.3564 6.05067 25.1644 6.136C24.9724 6.22133 24.7484 6.264 24.4924 6.264C24.0444 6.264 23.6604 6.06133 23.3404 5.656C23.0204 5.22933 22.8604 4.73867 22.8604 4.184C22.8604 3.77867 22.9244 3.448 23.0524 3.192C23.2017 2.91467 23.4364 2.66933 23.7564 2.456C24.7164 1.752 25.815 1.19733 27.0524 0.792C28.311 0.365332 29.5697 0.151999 30.8284 0.151999C32.343 0.151999 33.6657 0.407998 34.7964 0.919998C35.9484 1.432 36.8337 2.168 37.4524 3.128C38.071 4.06667 38.3804 5.15467 38.3804 6.392C38.3804 7.69333 38.103 8.89867 37.5484 10.008C37.015 11.1173 36.1084 12.3547 34.8284 13.72L29.8044 19H37.2284Z" fill="white"/>
      <path d="M28.5463 53.8492C30.1036 53.8492 30.8823 54.4785 30.8823 55.7372C30.8823 57.0172 30.1036 57.6572 28.5463 57.6572H27.3623V59.4812C27.3623 60.2918 27.1383 60.9105 26.6903 61.3372C26.2423 61.7638 25.6556 61.9772 24.9303 61.9772C24.2049 61.9772 23.6183 61.7638 23.1703 61.3372C22.7223 60.9105 22.4983 60.2918 22.4983 59.4812V57.6572H14.7223C14.0609 57.6572 13.5383 57.4652 13.1543 57.0812C12.7703 56.6758 12.5783 56.1745 12.5783 55.5772C12.5783 54.9798 12.7809 54.3825 13.1863 53.7852L22.7223 40.1532C22.9783 39.7905 23.2983 39.5238 23.6823 39.3532C24.0663 39.1612 24.4716 39.0652 24.8983 39.0652C25.5596 39.0652 26.1356 39.2892 26.6263 39.7372C27.1169 40.1638 27.3623 40.7612 27.3623 41.5292V53.8492H28.5463ZM17.6023 53.8492H22.4983V46.8092L17.6023 53.8492Z" fill="white"/>
    </svg>
  };
  const QuarterC = () => {
    return <svg width="43" height="63" viewBox="0 0 43 63" fill="none" xmlns="http://www.w3.org/2000/svg">
      <line x1="8.82129" y1="31.0859" x2="32.8213" y2="31.0859" stroke="#EDEDFB" stroke-width="2" stroke-linecap="round"/>
      <path d="M16.5045 19C18.0618 19 18.8405 19.6613 18.8405 20.984C18.8405 22.328 18.0618 23 16.5045 23H5.5605C3.98183 23 3.1925 22.328 3.1925 20.984C3.1925 19.6613 3.98183 19 5.5605 19H8.5365V5.912L5.7205 7.608C5.4005 7.8 5.0805 7.896 4.7605 7.896C4.22717 7.896 3.7685 7.672 3.3845 7.224C3.02183 6.776 2.8405 6.27467 2.8405 5.72C2.8405 4.97333 3.17117 4.408 3.8325 4.024L8.8885 0.983999C9.63517 0.535999 10.3818 0.311998 11.1285 0.311998C11.8325 0.311998 12.4085 0.535999 12.8565 0.983999C13.3045 1.41067 13.5285 1.99733 13.5285 2.744V19H16.5045ZM33.708 11.384C35.0093 11.768 36.012 12.44 36.716 13.4C37.42 14.3387 37.772 15.4907 37.772 16.856C37.772 18.8613 37.004 20.4293 35.468 21.56C33.932 22.6907 31.8093 23.256 29.1 23.256C26.3907 23.256 24.268 22.6907 22.732 21.56C21.196 20.4293 20.428 18.8613 20.428 16.856C20.428 15.448 20.78 14.2747 21.484 13.336C22.188 12.3973 23.2013 11.7467 24.524 11.384C23.4147 10.9573 22.5507 10.296 21.932 9.4C21.3133 8.504 21.004 7.45867 21.004 6.264C21.004 4.38667 21.7293 2.904 23.18 1.816C24.6307 0.706665 26.604 0.151999 29.1 0.151999C31.6173 0.151999 33.5907 0.695999 35.02 1.784C36.4707 2.872 37.196 4.36533 37.196 6.264C37.196 7.48 36.8867 8.54667 36.268 9.464C35.6493 10.3813 34.796 11.0213 33.708 11.384ZM29.1 3.96C26.8173 3.96 25.676 4.90933 25.676 6.808C25.676 8.728 26.8173 9.688 29.1 9.688C31.3827 9.688 32.524 8.728 32.524 6.808C32.524 4.90933 31.3827 3.96 29.1 3.96ZM29.1 19.448C31.788 19.448 33.132 18.456 33.132 16.472C33.132 14.488 31.788 13.496 29.1 13.496C26.412 13.496 25.068 14.488 25.068 16.472C25.068 18.456 26.412 19.448 29.1 19.448Z" fill="white"/>
      <path d="M25.2503 50.1692C26.5729 50.5532 27.5863 51.2252 28.2903 52.1852C29.0156 53.1238 29.3783 54.2758 29.3783 55.6412C29.3783 56.9425 29.0369 58.0732 28.3542 59.0332C27.6929 59.9932 26.7329 60.7398 25.4743 61.2732C24.2156 61.7852 22.7543 62.0412 21.0903 62.0412C19.7036 62.0412 18.3703 61.8385 17.0903 61.4332C15.8316 61.0278 14.7436 60.4625 13.8263 59.7372C13.5063 59.5025 13.2716 59.2465 13.1223 58.9692C12.9943 58.6918 12.9303 58.3718 12.9303 58.0092C12.9303 57.4545 13.0903 56.9852 13.4103 56.6012C13.7303 56.1958 14.1143 55.9932 14.5623 55.9932C14.8183 55.9932 15.0529 56.0358 15.2663 56.1212C15.4796 56.1852 15.7463 56.3132 16.0663 56.5052C17.0049 57.0385 17.8156 57.4438 18.4983 57.7212C19.1809 57.9985 19.9809 58.1372 20.8983 58.1372C22.1996 58.1372 23.1489 57.9025 23.7463 57.4332C24.3436 56.9425 24.6423 56.1852 24.6423 55.1612C24.6423 54.1585 24.3329 53.4332 23.7143 52.9852C23.0956 52.5372 22.1036 52.3132 20.7383 52.3132H18.8503C18.2956 52.3132 17.8583 52.1212 17.5383 51.7372C17.2183 51.3532 17.0583 50.8945 17.0583 50.3612C17.0583 49.8492 17.2183 49.4012 17.5383 49.0172C17.8583 48.6332 18.2956 48.4412 18.8503 48.4412H20.1943C21.4956 48.4412 22.4556 48.2172 23.0743 47.7692C23.7143 47.3212 24.0343 46.6278 24.0343 45.6892C24.0343 44.7932 23.7676 44.0998 23.2343 43.6092C22.7009 43.0972 21.9543 42.8412 20.9943 42.8412C20.2049 42.8412 19.4689 42.9798 18.7863 43.2572C18.1036 43.5345 17.3143 43.9398 16.4183 44.4732C16.0983 44.6652 15.8316 44.8038 15.6183 44.8892C15.4049 44.9532 15.1703 44.9852 14.9143 44.9852C14.4663 44.9852 14.0823 44.7932 13.7623 44.4092C13.4423 44.0038 13.2823 43.5238 13.2823 42.9692C13.2823 42.5852 13.3463 42.2652 13.4743 42.0092C13.6236 41.7318 13.8583 41.4758 14.1783 41.2412C15.0743 40.5158 16.1409 39.9505 17.3783 39.5452C18.6369 39.1398 19.9169 38.9372 21.2183 38.9372C22.7329 38.9372 24.0663 39.1932 25.2183 39.7052C26.3703 40.1958 27.2556 40.8998 27.8743 41.8172C28.4929 42.7345 28.8022 43.8012 28.8022 45.0172C28.8022 46.2332 28.4823 47.2998 27.8423 48.2172C27.2236 49.1132 26.3596 49.7638 25.2503 50.1692Z" fill="white"/>
    </svg>
  };


  const AISortCards = [
    {
      id: "pie-1",
      chart: <QuarterA />,
      quarter: "9/2"
    },
    {
      id: "pie-2",
      chart: <QuarterB />,
      quarter: "12/4"
    },
    {
      id: "pie-3",
      chart: <QuarterC />,
      quarter: "18/3"
    }
  ];

  const [selectCards, setSelecCards] = useState([]);
  const [showFeedback, setFeedback] = useState("");
  const [dataAnswers, setDataAnswers] = useState([]);
  const [attempts, setAttempts] = useState(1);
  const clueTexts = [
    "¿Puedes hacer que las tres fracciones tengan el mismo denominador? ¡Así es más fácil ordenarlas!",
    "¿Cuál es el denominador común entre 2, 4 y 3? ¡Una pista! haz una lista de los múltiplos de 2, 4 y 3 y encuentra el número más pequeño en común.  ¿Cómo utilizas este numero para convertir las tres fracciones originales 9/2, 12/4 y 18/3 en tres fracciones nuevas con el mismo denominador?"
  ];

  const validate = () => {
    return selectCards.length >= 3;
  };

  const nextActivity = () => {
    let corrects = ['18/3', '9/2', '12/4'];
    let answered = selectCards.map((t) => t.quarter);

    let ans = dataAnswers;
    ans.push(answered.join(';'))
    setDataAnswers(ans)

    let data = {
      'ENTRE2-Reto 8- Intento 1': dataAnswers[0],
      'ENTRE2-Reto 8- Intento 2': dataAnswers[1],
      'ENTRE2-Reto 8- Intento 3': dataAnswers[2],
      'ENTRE2-Reto 8 Veces': attempts - 1,
    }

    if (JSON.stringify(corrects) === JSON.stringify(answered)) {
      saveActivity(data)
      setFeedback('correct');
      setResult(true);
      //saveUser({ ...userData, aiSort: true })
    } else if (attempts < 3) {
      setSelecCards([]);
      setFeedback('clue');
      setAttempts(attempts + 1);
    } else {
      data['ENTRE3-Reto 5 Veces'] = attempts
      saveActivity(data)
      setResult(false);
      //saveUser({ ...userData, aiSort: true })
      goView(2);
    }
  };
  return (
    <div className="ai-sort question5">
      <div className="ai-sort-body">
        <p>Utiliza los recuadros de abajo para ordenar las fracciones de <strong>mayor a menor</strong>.</p>
        <div className="ai-sort-activity">
          <AISortDnD cards={AISortCards} answer={setSelecCards} />
        </div>
        <button className={`btn-next ${validate() ? "" : "disabled"}`} onClick={() => validate() ? nextActivity() : console.log("no posible")}>
          Enviar
          <BiRightArrowAlt />
        </button>
      </div>
      {showFeedback === 'correct' && <FeedbackCorrect goView={nextQuestion} view={6} />}
      {showFeedback === 'clue' && <FeedbackClue goView={setFeedback} attempt={attempts} message={clueTexts} />}
    </div>
  );
}